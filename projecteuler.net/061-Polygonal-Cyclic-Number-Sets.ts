// https://www.typescriptlang.org/play?#code/MYewdgzgLgBFBOBLAhmA5gGwKYAUQYE81xkMYBeGACjAC4YwBXAWwCMt4BKCgPgZgBU1MDADUMAIzcA9DABMAbgBQoSLAgBHRsni58REmUo16TNh27k+IoWGWroMAA5YwUZMTCk8hT6QrCpizsXLz8QlQAzAIiALSSMvL24I4AFlgAHh6GPgZeRoEMwRZhNtRyMTDxUslqMOlO7n4Yuc0BJkXmoVbh1ACslfGRiYoqKbAgwE05+m3GdJ0hltaC1NFx8pzKSohuHABmyMBYMK2GAHLF8DAA3kowD51BXcqPMNDw9B+7aK+PuwATTLPEJ-B7pZAAr4IH5guDIRAYaFIdDKAC+SiU+0YYCmiHAMGAumQUD0vguVxoLBBHAANDBAcDFhZ6Gd8pcurd7o8HOoEAEzAA6KAgADKMPQVC23IeuigjHgIjubzeZlpMpVH3VKv+YCBGW1OvqWEhyMFEEYrA+VAADPS5JxDTr3IizRarQgqA6NWj0ZjsbioPiRGgsFAAIIYDAAMRACoAIog0IgoGzSByQhAqKGwBwSSBPoUzEtSldOKzZhSugBtAC6XLevOZ8AgFfJ7KudYCdbh2FgjIyAQkcIA7qlEScqAhGFhuMqjU2zAEc3mRfAqAPpUbCeNnJX8gEiSbSWmMBmOFTmPTN3C3oh9sIWDAeJQJDb3za5xrt6xiQBrW9Hgxbd70fZhn1fD8YAAMmgmAAEInH3UhhQRDBzXceAoAgAB1FNUioAAiG1CM4L9t1VK4IEFJxGAgAikPbUgtyNYCjQHURRDhNjZTDBURGLDgID9LEcTxAl9kBABJUlmFw-CAFkSWAcd0AAFTQ84QCgKS9UyDdZNbU5kLPTta3pF0kXeCU0GvPSMhpLg2zydMzIbR45X4hlDMFSSMFJddv3+WSwhTLBmFQxEKHIShLJguCwoigcEJihl7I1aUMVEwNgxgSS9QANVIRAARk8Ks0SozT3PeA63pJxdAAN3xOiyrk5zmhquty2MpjTJret514+VFW88rfMRAKDPCsIhpVJsIQBAJEsFRbAIeJtksoFaB3Wnc6mYZTVLQHAmpaiA2ogAJ8tKwy8KgVIlKgFSfg0xEtJ0+yqAarBmrjC7DPpRa7P1FidU80bDue47Tt+87LsFbB0Ae58YBtbjMv9MSgwJBBkEaoSsFFLAtFcY4qBARpgyqkyutrOrCQVXQ3GJ0ncSwDqqxCLtKG6zmOwGmAAB8iijdyHlAimqZSRHXDQFGYsoG14sZ+BmagVmZ3Z2XkdSaLKAANnI9iHyoYAmdcDWSa145qxtWtVpNJbFdV9XNbJrBqz6B3LONiiYAhkRzbVy33fZva0RgLAMAgE45u3QPRYwCOfUxN59gLag+wZAJ0ZzgAeGBKZxyAdfl1IFAZTi-fm3di+pgBhDBwBOSh65liAMEQcnpSCh5pFkXTnAwI4Tl0ZgQAJuB0gZWIUcSmBUCWtB4GQVhp5ORrSBnagIF2Y4YBHE5wEIAPwsnrAlpbzhBT7-bHFzDIdNk8M1eQAgAnbyAm5b80nC78miB6RSDtrWbY24B4wAADIgBAH+PKmdUAEAej8aeJIYBQxUlgK6D0TjB3VvCREd9s6WSelgq6lBH7P3Cq-VeBA9qS3waHa2Hsy4oz4J+cWFEmxMLcG9AovCrZs1toIsOxw2F62qD7NCe03ikKOtggUmRqHMFoe-Ca-kLwiB6GAR2kJ9au0tvwsGKoeIqgztcKg2cABWudK62MLvI6G2CJH2Orlw7cTZY7CKwD-XMh4LYsxYdrTu3csBSlkY8bxNtfHN1zDROiBEnHkOrNY2sJjPF12ltouAq8CYtiJsE8mX8IB+KwPSaJHsykZJNtQL+Nd-bDS8l-SJDwzFvDMVlN4icmBRhEgGcSIgbpiKJiwKUjkuFNlIBgNSSBUCYEUZQUMEYoyxgTEmFM1UqJTjmegbAp4TFTKjKKLQOhFkwGWZGGMcZ4CJmTKmWm2zNDaF0AcuERyWiW2yJAZcYYrlrNuRsh5fUapZhcG4b53gTKHN3NMgAEpkb5FCLl-NWTcu5mzHldCzOkLIzQ3kag+QixoSLfkrOues+5WzsVUAaNMfIBLGywqjAAeSmKSpZqKKWAqpVizMFN2X4uhe8rJJdkXVjvtM2ZKA9nYPpNMk5Ly5WLyjDgL5ngIDyqjAivFKQtUYGJfSzVKqMBsqNRqMBGpE543ybHEZUsxWcHgoKXQAJGDkyoBaK8e5CDLHeE+cQjECCCjVGjTGWJAQjNFGMrYQA

// PROBLEM //

/*
Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) numbers and are generated by the following formulae:

Triangle    P3,n=n(n+1)/2       1, 3, 6, 10, 15, ...
Square      P4,n=n2             1, 4, 9, 16, 25, ...
Pentagonal  P5,n=n(3n−1)/2      1, 5, 12, 22, 35, ...
Hexagonal   P6,n=n(2n−1)        1, 6, 15, 28, 45, ...
Heptagonal  P7,n=n(5n−3)/2      1, 7, 18, 34, 55, ...
Octagonal   P8,n=n(3n−2)        1, 8, 21, 40, 65, ...

The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.

1. The set is cyclic, in that the last two digits of each number is the first two digits of the next number (including the last number with the first).
2. Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and pentagonal (P5,44=2882), is represented by a different number in the set.
3. This is the only set of 4-digit numbers with this property.

Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type: triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number in the set.
*/

// ANSWER //
const trianglePolygonal = (n: number) => n * (n + 1) / 2;
const squarePolygonal = (n: number) => n * n;
const pentagonalPolygonal = (n: number) => n * (3*n - 1) / 2;
const hexagonalPolygonal = (n: number) => n * (2*n - 1);
const heptagonalPolygonal = (n: number) => n * (5*n - 3) / 2;
const octagonalPolygonal = (n: number) => n * (3*n - 2);

interface PolygonalNumber {
    num: number;
    str: string;
    index: number;
    head: string;
    tail: string;
}

function createPolygonalNumber(num: number, index: number): PolygonalNumber {
    const str = num.toString();
    return {
        num,
        str,
        index,
        head: str.substr(0, 2),
        tail: str.substr(2)
    };
}

function getAllFourDigitPolygonalNumbers(generator: (n: number) => number): PolygonalNumber[] {
    const numbers: PolygonalNumber[] = [];
    let index = 1;
    while (true) {
        const num = generator(index);
        const polygonal = createPolygonalNumber(num, index);
        if (num >= 10000) {
            break;
        }
        if (num >= 1000 && !polygonal.tail.startsWith("0")) {
            numbers.push(polygonal);
        }
        index++;
    }
    return numbers;
}

function findItemsWithMatchingTailNotIndex(items: PolygonalNumber[], tail: string, index: number): PolygonalNumber[] {
    return items.filter(
        item => item.tail === tail && item.index !== index
    );
}

function findValidItems(items: PolygonalNumber[], previousItems: PolygonalNumber[]): PolygonalNumber[] {
    return items.filter(item => {
        const head = item.head;
        const index = item.index;
        const matchingPreviousItems = findItemsWithMatchingTailNotIndex(previousItems, head, index);
        return matchingPreviousItems.length > 0;
    });
}

function traverseSequence(options: PolygonalNumber[][], currentSequence: PolygonalNumber[] = []): PolygonalNumber[] | null {
    if (options.length === 0 && currentSequence.length === 6) {
        if (currentSequence[0].head === currentSequence[5].tail) {
            return currentSequence;
        } else {
            return null;
        }
    }

    for (let i = 0; i < options.length; i++) {
        const optionsClone = options.slice();

        // In place remove the i-th item and grab the value (since we only removed one).
        const nextItemArray = optionsClone.splice(i, 1)[0];

        // Look for anything that matches the current tail
        let tailMatches = nextItemArray;
        if (currentSequence.length > 0) {
            const currentTail = currentSequence[currentSequence.length - 1].tail;
            tailMatches = nextItemArray.filter(n => n.head === currentTail);
        }
        for (let j = 0; j < tailMatches.length; j++) {
            const sequenceClone = currentSequence.slice();
            sequenceClone.push(tailMatches[j]);
            const option = traverseSequence(optionsClone, sequenceClone);
            if (option) {
                return option;
            }
        }
    }

    return null;
}

function findSequenceSum(): number {
    const allTriangles = getAllFourDigitPolygonalNumbers(trianglePolygonal);
    const allSquares = getAllFourDigitPolygonalNumbers(squarePolygonal);
    const allPentagons = getAllFourDigitPolygonalNumbers(pentagonalPolygonal);
    const allHexagons = getAllFourDigitPolygonalNumbers(hexagonalPolygonal);
    const allHeptagons = getAllFourDigitPolygonalNumbers(heptagonalPolygonal);
    const allOctagons = getAllFourDigitPolygonalNumbers(octagonalPolygonal);
    const options = [
        allTriangles, allSquares, allPentagons, allHexagons, allHeptagons, allOctagons
    ];
    return traverseSequence(options)!.reduce((sum, poly) => sum + poly.num, 0);
}

findSequenceSum();

// 28684