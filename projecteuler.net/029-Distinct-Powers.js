// http://repl.it/Y43

// PROBLEM //

/*
Consider all integer combinations of ab for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:

22=4, 23=8, 24=16, 25=32
32=9, 33=27, 34=81, 35=243
42=16, 43=64, 44=256, 45=1024
52=25, 53=125, 54=625, 55=3125
If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:

4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

How many distinct terms are in the sequence generated by ab for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?
*/

// ANSWER //
Array.fill=function(s,v){var a=[],i=0;while(i++<s)a.push(v);return a};

function add(a, b) {
  var aDigits = a.split('').map(Number).reverse();
  var bDigits = b.split('').map(Number).reverse();
  var length = Math.max(aDigits.length, bDigits.length);

  var sumDigits = [];
  var carry = 0;
  for (var index = 0; index < length; index++) {
    var aDigit = aDigits[index] || 0;
    var bDigit = bDigits[index] || 0;

    var sum = aDigit + bDigit + carry;

    sumDigits.push(sum % 10);
    carry = sum / 10 | 0;
  }

  if (carry)
    sumDigits.push(carry);

  return sumDigits.reverse().join('');
}

function multiply(a, b) {
  var aDigits = a.split('').map(Number).reverse();
  var bDigits = b.split('').map(Number).reverse();

  return bDigits.reduce(function(products, bDigit, index) {
    var productDigits = Array.fill(index, 0);
    var carry = 0;
    aDigits.forEach(function(aDigit) {
        var product = aDigit * bDigit + carry;
        productDigits.push(product % 10);
        carry = product / 10 | 0;
    });

    if (carry)
      productDigits.push(carry);

    products.push(productDigits.reverse().join(''));
    return products;
  },[]).reduce(add);
}

function power(a, b) {
    a = a.toString();
    var prod = a;
    while (--b)
        prod = multiply(prod, a);
    return prod;
}

function getUniqueExponentials(min, max) {
    var values = {};

    for (var a = min; a <= max; a++) {
        for (var b = min; b <= max; b++) {
            var exp = power(a, b);
            if (!values[exp])
                values[exp] = 1;
        }
    }

    return Object.keys(values).length;
}

getUniqueExponentials(2, 100);

// 9183
